package editortrees;

// A node in a height-balanced binary tree with rank.
// Except for the NULL_sNODE (if you choose to use one), one node cannot
// belong to two different trees.

public class Node {
	
	enum Code {SAME, LEFT, RIGHT};
	
	// The fields would normally be private, but for the purposes of this class, 
	// we want to be able to test the results of the algorithms in addition to the
	// "publicly visible" effects
	
	char element;            
	Node left, right; // subtrees
	int rank;         // inorder position of this node within its own subtree.
	Code balance; 
	Node parent;  // You may want this field.
	boolean isLeftThreaded;
	boolean isRightThreaded;
	// Feel free to add other fields that you find useful

	// You will probably want to add several other methods

	// For the following methods, you should fill in the details so that they work correctly
	public Node(char e, Node l, Node r, Code b, Node p, boolean iLT, boolean iRT){
		this.element = e;
		this.left = l;
		this.right = r;
		this.balance = b;
		this.parent = p;
		this.isLeftThreaded = iLT;
		this.isRightThreaded = iRT;
	}
	
	public int height() {
		if(this.balance == Code.SAME && this.rank == 0){
			return 0;
		}
		Node current = this;
		if (current.balance == Code.LEFT) {
			return current.left.height() + 1;
		} else if (current.balance == Code.RIGHT) {
			return current.right.height() + 1;
		} else {
			return Math.max(current.left.height(), current.right.height()) + 1;
		}
	}

	public int size() {
		int count = 0;
		Node current = this;
		while (current.left != null) {
			current = current.left;
		}
		count++;
		current = current.right;
		while (current != null && current.right != null) {
			while (current != null
					&& !(current.isRightThreaded == false && current.right.isLeftThreaded == false)) {
				count++;
				current = current.right;
			}
			if (current != null) {
				count++;
				current = current.right;
				while (!current.isLeftThreaded) {
					current = current.left;
				}
			}
		}
		if(current != null){
			count++;
		}
		return count;
	}

}