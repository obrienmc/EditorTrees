package editortrees;

// A node in a height-balanced binary tree with rank.
// Except for the NULL_sNODE (if you choose to use one), one node cannot
// belong to two different trees.

/**
 * Creates and edits Nodes for Editor Trees.
 * 
 * @author burchtm, havensd, obrienm Created April 2014.
 */
public class Node {
	public static final Node NULL_NODE = new NullNode();

	enum Code {
		SAME, LEFT, RIGHT
	};

	// The fields would normally be private, but for the purposes of this class,
	// we want to be able to test the results of the algorithms in addition to
	// the
	// "publicly visible" effects

	char element;
	Node left, right;
	Node parent; // subtrees
	int rank; // inorder position of this node within its own subtree.
	int height;
	int size;
	Code balance;

	/**
	 * Constructs a node with the given element and parent.
	 * 
	 * @param e
	 * @param parent
	 */
	public Node(char e, Node parent) {
		this.element = e;
		this.left = NULL_NODE;
		this.right = NULL_NODE;
		this.balance = Code.SAME;
		this.parent = parent;
		this.height = 0;
		this.size = 1;
		this.rank = 0;
	}

	/**
	 * Constructs a node witht the given element.
	 * 
	 * @param e
	 */
	public Node(char e) {
		this.element = e;
		this.left = NULL_NODE;
		this.right = NULL_NODE;
		this.balance = Code.SAME;
		this.parent = NULL_NODE;
		this.height = 0;
		this.size = 1;
		this.rank = 0;
	}

	/**
	 * Constructs a NULL_NODE.
	 * 
	 */
	public Node() {
		this.element = Character.MIN_VALUE;
		this.rank = Integer.MIN_VALUE;
		this.size = 0;
		this.balance = Code.SAME;
		this.height = -1;
		this.left = null;
		this.right = null;
		this.parent = NULL_NODE;
	}

	// Node parent; // You may want this field.
	// Feel free to add other fields that you find useful

	// You will probably want to add several other methods

	// For the following methods, you should fill in the details so that they
	// work correctly
	public String toString() {
		if (this == NULL_NODE) {
			return "";
		}
		return this.left.toString() + this.element + this.right.toString();
	}

	/**
	 * Returns the height of the node's subtree
	 * 
	 * @return height of the node's subtree
	 */
	public int height() {
		return this.height;
	}

	/**
	 * Returns the size of the node
	 * 
	 * @return size of the node
	 */
	public int size() {
		return this.size;
	}

	/**
	 * Returns a Node at the given index position.
	 * 
	 * @param pos
	 * @return Node at given position
	 */
	public Node get(int pos) {
		if (pos > this.rank) { // go right
			return this.right.get(pos - rank - 1);
		} else if (pos < this.rank) { // go left
			return this.left.get(pos);
		} else {
			return this;
		}
	}

	/**
	 * Adds a new node with a given char element at the given index position to
	 * the Editor Tree.
	 * 
	 * @param c
	 * @param pos
	 * @param e
	 */
	public void add(char c, int pos, EditTree e) {
		if (pos > this.rank) { // go right
			if (this.right == NULL_NODE) {
				this.right = new Node(c, this);
			} else {
				this.right.add(c, pos - rank - 1, e);
			}
			int rotate = needsRotation();
			switch (rotate) {
			case (-2):
				doubleLeftRotate(this, this.right, this.right.left, e);
				break;
			case (-1):
				singleLeftRotate(this, this.right, e);
				break;
			case (0):
				setFieldNoRotate();
				break;
			case (1):
				singleRightRotate(this, this.left, e);
				break;
			case (2):
				doubleRightRotate(this, this.left, this.left.right, e);
				break;
			}
		} else { // go left
			if (this.left == NULL_NODE) {
				this.left = new Node(c, this);
			} else {
				this.left.add(c, pos, e);
			}
			int rotate = needsRotation();
			switch (rotate) {
			case (-2):
				doubleLeftRotate(this, this.right, this.right.left, e);
				break;
			case (-1):
				singleLeftRotate(this, this.right, e);
				break;
			case (0):
				setFieldNoRotate();
				break;
			case (1):
				singleRightRotate(this, this.left, e);
				break;
			case (2):
				doubleRightRotate(this, this.left, this.left.right, e);
				break;
			}
		}
	}

	private void setFieldNoRotate() {
		this.setHeight();
		this.setSize();
		this.setBalance();
		this.setRank();
	}

	private void setBalance() {
		if (this.left.height > this.right.height) {
			this.balance = Code.LEFT;
		} else if (this.left.height < this.right.height) {
			this.balance = Code.RIGHT;
		} else {
			this.balance = Code.SAME;
		}
	}

	private void setHeight() {
		this.height = Math.max(this.left.height, this.right.height) + 1;
	}

	private void setSize() {
		this.size = this.left.size + this.right.size + 1;
	}

	private void setRank() {
		this.rank = this.left.size;
	}

	private void doubleRightRotate(Node parent, Node child, Node grandchild,
			EditTree e) {
		singleLeftRotate(child, grandchild, e);
		singleRightRotate(parent, child, e);

		grandchild.setFieldsAfterRotate();
		child.setFieldsAfterRotate();
		parent.setFieldsAfterRotate();
	}

	private void singleRightRotate(Node parent, Node child, EditTree e) {
		char parentElement = parent.element;
		parent.element = child.element;
		child.element = parentElement;
		Node childSubtree = child.right;
		child.right = parent.right;
		child.right.parent = child;
		parent.left = child.left;
		child.left.parent = parent;
		parent.right = child;
		child.left = childSubtree;

		child.setFieldsAfterRotate();
		parent.setFieldsAfterRotate();
		e.totalRotationCount++;
	}

	private void singleLeftRotate(Node parent, Node child, EditTree e) {
		char parentElement = parent.element;
		parent.element = child.element;
		child.element = parentElement;
		Node childSubtree = child.left;
		child.left = parent.left;
		child.left.parent = child;
		parent.right = child.right;
		child.right.parent = parent;
		parent.left = child;
		child.right = childSubtree;

		child.setFieldsAfterRotate();
		parent.setFieldsAfterRotate();
		e.totalRotationCount++;
	}

	private void doubleLeftRotate(Node parent, Node child, Node grandchild,
			EditTree e) {
		singleRightRotate(child, grandchild, e);
		singleLeftRotate(parent, child, e);

		grandchild.setFieldsAfterRotate();
		child.setFieldsAfterRotate();
		parent.setFieldsAfterRotate();
	}

	private void setFieldsAfterRotate() {
		this.setBalance();
		this.setHeight();
		this.setSize();
		this.setRank();
	}

	private int needsRotation() {
		if (this.left.height - this.right.height > 1) {
			// rotate right
			if (this.left.balance == Code.LEFT) {
				return 1;
			} else {
				return 2;
			}
		} else if (this.right.height - this.left.height > 1) {
			// rotate left
			if (this.right.balance == Code.RIGHT) {
				return -1;
			} else {
				return -2;
			}
		} else {
			return 0;
		}
	}

	/**
	 * Creates a copy of the given current node from an original Editor Tree.
	 * 
	 * @param e
	 * @param eCurrent
	 */
	void editTreeCopy(EditTree e, Node eCurrent) {
		this.element = eCurrent.element;
		this.balance = eCurrent.balance;
		this.height = eCurrent.height;
		this.rank = eCurrent.rank;
		this.size = eCurrent.size;
		if (eCurrent.left != Node.NULL_NODE) {
			this.left = new Node();
			this.left.editTreeCopy(e, eCurrent.left);
		} else {
			this.left = Node.NULL_NODE;
		}
		if (eCurrent.right != Node.NULL_NODE) {
			this.right = new Node();
			this.right.editTreeCopy(e, eCurrent.right);
		} else {
			this.right = Node.NULL_NODE;
		}
		this.left.parent = this;
		this.right.parent = this;
	}

	public char delete(EditTree e) { //update tree size
		char element = this.element;
		if (this.left == NULL_NODE && this.right == NULL_NODE) { // no children (LEAF)
			if (this.parent.left == this) {// node is on left
				this.parent.left = NULL_NODE;
				this.parent.left.parent = this.parent;
			} else if (this.parent.right == this) { // node is on right
				this.parent.right = NULL_NODE;
				this.parent.right.parent = this.parent;
			}
		} else if (this.left == NULL_NODE ^ this.right == NULL_NODE) { // one child
			if (this.left == NULL_NODE) { // only right child
				if(this.parent == NULL_NODE){
					e.root = this.right;
				}
				else if(this.parent.left == this){
					this.parent.left = this.right;
				} else{
					this.parent.right = this.right;
				}
			} else { // only left child
				if(this.parent == NULL_NODE){
					e.root = this.left;
				}
				else if(this.parent.left == this){
					this.parent.left = this.left;
				} else{
					this.parent.right = this.left;
				}
			}
		} else { // two children
			Node temp = this.right;
			while(temp.left != NULL_NODE){
				temp = temp.left;
			}
			this.element = temp.element;
			if(this.right.left == NULL_NODE){
				this.right = this.right.right;
				this.right.parent = this;
			} else {
				temp.parent.left = temp.right;
				temp.right.parent = temp.parent;
			}
			temp.backTrack(e);
		}
		e.setTreeSize();
		this.setFieldNoRotate();
		this.backTrack(e);
		return element;
	}

	private void backTrack(EditTree e) {
		if (this == NULL_NODE) {
			return;
		}
		int rotate = needsRotation();
		switch (rotate) {
		case (-2):
			doubleLeftRotate(this, this.right, this.right.left, e);
			break;
		case (-1):
			singleLeftRotate(this, this.right, e);
			break;
		case (0):
			setFieldNoRotate();
			break;
		case (1):
			singleRightRotate(this, this.left, e);
			break;
		case (2):
			doubleRightRotate(this, this.left, this.left.right, e);
			break;
		}
		this.parent.backTrack(e);

	}

}